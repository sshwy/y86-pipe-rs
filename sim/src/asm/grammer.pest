whitespace = _{ " " | "\t" }
comments   =  _{ "#" ~ (!NEWLINE ~ ANY)* }

/// comma (,) surrounded with possible spaces
spaced_comma = _{ whitespace* ~ "," ~ whitespace* }

/// numeric values (decimal and hexical)
num = { "-"? ~ ("0x" ~ ('0' .. '9' | 'a' .. 'f' | 'A' .. 'F')+ | ('0'..'9')+) }

/// immediate values (decimal and hexical)
imm = { "$" ~ num }

/// registers
reg = @{ "%" ~ ("rax" | "rbx" | "rcx" | "rdx" | "rdi" | "rsi" | "rsp" | "rbp" | "r8" | "r9" | "r10" | "r11" | "r12" | "r13" | "r14") }

/// address mode expression
addr = { num? ~ "(" ~ reg ~ ")" }

/// label symbol
label = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

/// suffix used for cmov and j
cc_suf = { "le" | "l" | "ge" | "g" | "e" | "ne" }
rrmovq = { "rrmovq" }
mp_suf = { "mp" }

// Instructions

i_single = { "ret" | "halt" | "nop" }
i_cmovq  = { ( rrmovq | "cmov" ~ cc_suf) ~ whitespace* ~ reg ~ spaced_comma ~ reg }
i_mrmovq = { "mrmovq" ~ whitespace* ~ addr ~ spaced_comma ~ reg }
i_rmmovq = { "rmmovq" ~ whitespace* ~ reg ~ spaced_comma ~ addr }
i_irmovq = { "irmovq" ~ whitespace* ~ (imm | label) ~ spaced_comma ~ reg }
i_opq    = { ("andq" | "addq" | "subq" | "xorq") ~ whitespace* ~ reg ~ spaced_comma ~ reg }
i_iopq   = { ("iandq" | "iaddq" | "isubq" | "ixorq") ~ whitespace* ~ (imm | label) ~ spaced_comma ~ reg }
i_jx     = { "j" ~ (cc_suf | mp_suf) ~ whitespace* ~ label }
i_call   = { "call" ~ whitespace* ~ label }
i_pushq  = { "pushq" ~ whitespace* ~ reg }
i_popq   = { "popq" ~ whitespace* ~ reg }

// Directives

d_pos   = { ".pos" ~ whitespace* ~ num }

/// - `.byte`: 1b
/// - `.word`: 2b
/// - `.long`: 4b
/// - `.quad`: 8b
d_data  = { (".byte" | ".word" | ".long" | ".quad") ~ whitespace* ~ (num | label) }

/// Align the current instruction memory address to the multiple of the align number.
/// The number should be pow of 2.
d_align = { ".align" ~ whitespace* ~ num }

/// can be placed at the end of a line
line_sep = _{ whitespace* ~ comments? }

line = {
  whitespace* ~ (label ~ ":" ~ whitespace*)? ~ (i_mrmovq | i_irmovq | i_rmmovq | i_opq | i_iopq | i_jx | i_cmovq | i_call | i_single | i_pushq | i_popq // instructions
  | d_pos | d_data | d_align // directives
  )? // can be nothing
  ~ line_sep // contains comments
}
main = {
    SOI ~ line? // the first line is not required to have leading newline
  ~ (NEWLINE ~ line)* ~ EOI
}
